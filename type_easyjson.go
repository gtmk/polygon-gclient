// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package polygonio

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonBc289ab0DecodeGithubComGtmkPolygonGclient(in *jlexer.Lexer, out *StreamTrades) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(StreamTrades, 0, 0)
			} else {
				*out = StreamTrades{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 StreamTrade
			easyjsonBc289ab0DecodeGithubComGtmkPolygonGclient1(in, &v1)
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBc289ab0EncodeGithubComGtmkPolygonGclient(out *jwriter.Writer, in StreamTrades) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			easyjsonBc289ab0EncodeGithubComGtmkPolygonGclient1(out, v3)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v StreamTrades) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBc289ab0EncodeGithubComGtmkPolygonGclient(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StreamTrades) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBc289ab0EncodeGithubComGtmkPolygonGclient(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StreamTrades) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBc289ab0DecodeGithubComGtmkPolygonGclient(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StreamTrades) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBc289ab0DecodeGithubComGtmkPolygonGclient(l, v)
}
func easyjsonBc289ab0DecodeGithubComGtmkPolygonGclient1(in *jlexer.Lexer, out *StreamTrade) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "sym":
			out.Symbol = string(in.String())
		case "x":
			out.Exchange = int32(in.Int32())
		case "i":
			out.TradeID = string(in.String())
		case "p":
			out.Price = float64(in.Float64())
		case "s":
			out.Size = int32(in.Int32())
		case "t":
			out.Timestamp = int64(in.Int64())
		case "c":
			if in.IsNull() {
				in.Skip()
				out.Conditions = nil
			} else {
				in.Delim('[')
				if out.Conditions == nil {
					if !in.IsDelim(']') {
						out.Conditions = make([]int32, 0, 16)
					} else {
						out.Conditions = []int32{}
					}
				} else {
					out.Conditions = (out.Conditions)[:0]
				}
				for !in.IsDelim(']') {
					var v4 int32
					v4 = int32(in.Int32())
					out.Conditions = append(out.Conditions, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBc289ab0EncodeGithubComGtmkPolygonGclient1(out *jwriter.Writer, in StreamTrade) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"sym\":"
		out.RawString(prefix[1:])
		out.String(string(in.Symbol))
	}
	{
		const prefix string = ",\"x\":"
		out.RawString(prefix)
		out.Int32(int32(in.Exchange))
	}
	{
		const prefix string = ",\"i\":"
		out.RawString(prefix)
		out.String(string(in.TradeID))
	}
	{
		const prefix string = ",\"p\":"
		out.RawString(prefix)
		out.Float64(float64(in.Price))
	}
	{
		const prefix string = ",\"s\":"
		out.RawString(prefix)
		out.Int32(int32(in.Size))
	}
	{
		const prefix string = ",\"t\":"
		out.RawString(prefix)
		out.Int64(int64(in.Timestamp))
	}
	{
		const prefix string = ",\"c\":"
		out.RawString(prefix)
		if in.Conditions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Conditions {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.Int32(int32(v6))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjsonBc289ab0DecodeGithubComGtmkPolygonGclient2(in *jlexer.Lexer, out *StreamQuotes) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(StreamQuotes, 0, 0)
			} else {
				*out = StreamQuotes{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v7 StreamQuote
			easyjsonBc289ab0DecodeGithubComGtmkPolygonGclient3(in, &v7)
			*out = append(*out, v7)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBc289ab0EncodeGithubComGtmkPolygonGclient2(out *jwriter.Writer, in StreamQuotes) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v8, v9 := range in {
			if v8 > 0 {
				out.RawByte(',')
			}
			easyjsonBc289ab0EncodeGithubComGtmkPolygonGclient3(out, v9)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v StreamQuotes) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBc289ab0EncodeGithubComGtmkPolygonGclient2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StreamQuotes) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBc289ab0EncodeGithubComGtmkPolygonGclient2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StreamQuotes) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBc289ab0DecodeGithubComGtmkPolygonGclient2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StreamQuotes) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBc289ab0DecodeGithubComGtmkPolygonGclient2(l, v)
}
func easyjsonBc289ab0DecodeGithubComGtmkPolygonGclient3(in *jlexer.Lexer, out *StreamQuote) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "sym":
			out.Symbol = string(in.String())
		case "c":
			out.Condition = int32(in.Int32())
		case "bx":
			out.BidExchange = int32(in.Int32())
		case "ax":
			out.AskExchange = int32(in.Int32())
		case "bp":
			out.BidPrice = float64(in.Float64())
		case "ap":
			out.AskPrice = float64(in.Float64())
		case "bs":
			out.BidSize = int64(in.Int64())
		case "as":
			out.AskSize = int64(in.Int64())
		case "t":
			out.Timestamp = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBc289ab0EncodeGithubComGtmkPolygonGclient3(out *jwriter.Writer, in StreamQuote) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"sym\":"
		out.RawString(prefix[1:])
		out.String(string(in.Symbol))
	}
	{
		const prefix string = ",\"c\":"
		out.RawString(prefix)
		out.Int32(int32(in.Condition))
	}
	{
		const prefix string = ",\"bx\":"
		out.RawString(prefix)
		out.Int32(int32(in.BidExchange))
	}
	{
		const prefix string = ",\"ax\":"
		out.RawString(prefix)
		out.Int32(int32(in.AskExchange))
	}
	{
		const prefix string = ",\"bp\":"
		out.RawString(prefix)
		out.Float64(float64(in.BidPrice))
	}
	{
		const prefix string = ",\"ap\":"
		out.RawString(prefix)
		out.Float64(float64(in.AskPrice))
	}
	{
		const prefix string = ",\"bs\":"
		out.RawString(prefix)
		out.Int64(int64(in.BidSize))
	}
	{
		const prefix string = ",\"as\":"
		out.RawString(prefix)
		out.Int64(int64(in.AskSize))
	}
	{
		const prefix string = ",\"t\":"
		out.RawString(prefix)
		out.Int64(int64(in.Timestamp))
	}
	out.RawByte('}')
}
func easyjsonBc289ab0DecodeGithubComGtmkPolygonGclient4(in *jlexer.Lexer, out *StreamAggregates) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(StreamAggregates, 0, 0)
			} else {
				*out = StreamAggregates{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v10 StreamAggregate
			easyjsonBc289ab0DecodeGithubComGtmkPolygonGclient5(in, &v10)
			*out = append(*out, v10)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBc289ab0EncodeGithubComGtmkPolygonGclient4(out *jwriter.Writer, in StreamAggregates) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v11, v12 := range in {
			if v11 > 0 {
				out.RawByte(',')
			}
			easyjsonBc289ab0EncodeGithubComGtmkPolygonGclient5(out, v12)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v StreamAggregates) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBc289ab0EncodeGithubComGtmkPolygonGclient4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StreamAggregates) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBc289ab0EncodeGithubComGtmkPolygonGclient4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StreamAggregates) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBc289ab0DecodeGithubComGtmkPolygonGclient4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StreamAggregates) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBc289ab0DecodeGithubComGtmkPolygonGclient4(l, v)
}
func easyjsonBc289ab0DecodeGithubComGtmkPolygonGclient5(in *jlexer.Lexer, out *StreamAggregate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ev":
			out.Event = string(in.String())
		case "sym":
			out.Symbol = string(in.String())
		case "v":
			out.Volume = int32(in.Int32())
		case "av":
			out.AccumulatedVolume = int32(in.Int32())
		case "op":
			out.OpeningPrice = float64(in.Float64())
		case "vw":
			out.VWAP = float64(in.Float64())
		case "o":
			out.OpenPrice = float64(in.Float64())
		case "c":
			out.ClosePrice = float64(in.Float64())
		case "h":
			out.HighPrice = float64(in.Float64())
		case "l":
			out.LowPrice = float64(in.Float64())
		case "a":
			out.Average = float64(in.Float64())
		case "s":
			out.StartTimestamp = int64(in.Int64())
		case "e":
			out.EndTimestamp = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBc289ab0EncodeGithubComGtmkPolygonGclient5(out *jwriter.Writer, in StreamAggregate) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ev\":"
		out.RawString(prefix[1:])
		out.String(string(in.Event))
	}
	{
		const prefix string = ",\"sym\":"
		out.RawString(prefix)
		out.String(string(in.Symbol))
	}
	{
		const prefix string = ",\"v\":"
		out.RawString(prefix)
		out.Int32(int32(in.Volume))
	}
	{
		const prefix string = ",\"av\":"
		out.RawString(prefix)
		out.Int32(int32(in.AccumulatedVolume))
	}
	{
		const prefix string = ",\"op\":"
		out.RawString(prefix)
		out.Float64(float64(in.OpeningPrice))
	}
	{
		const prefix string = ",\"vw\":"
		out.RawString(prefix)
		out.Float64(float64(in.VWAP))
	}
	{
		const prefix string = ",\"o\":"
		out.RawString(prefix)
		out.Float64(float64(in.OpenPrice))
	}
	{
		const prefix string = ",\"c\":"
		out.RawString(prefix)
		out.Float64(float64(in.ClosePrice))
	}
	{
		const prefix string = ",\"h\":"
		out.RawString(prefix)
		out.Float64(float64(in.HighPrice))
	}
	{
		const prefix string = ",\"l\":"
		out.RawString(prefix)
		out.Float64(float64(in.LowPrice))
	}
	{
		const prefix string = ",\"a\":"
		out.RawString(prefix)
		out.Float64(float64(in.Average))
	}
	{
		const prefix string = ",\"s\":"
		out.RawString(prefix)
		out.Int64(int64(in.StartTimestamp))
	}
	{
		const prefix string = ",\"e\":"
		out.RawString(prefix)
		out.Int64(int64(in.EndTimestamp))
	}
	out.RawByte('}')
}
func easyjsonBc289ab0DecodeGithubComGtmkPolygonGclient6(in *jlexer.Lexer, out *StockTradesResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "results":
			if in.IsNull() {
				in.Skip()
				out.Results = nil
			} else {
				in.Delim('[')
				if out.Results == nil {
					if !in.IsDelim(']') {
						out.Results = make(Trades, 0, 0)
					} else {
						out.Results = Trades{}
					}
				} else {
					out.Results = (out.Results)[:0]
				}
				for !in.IsDelim(']') {
					var v13 Trade
					easyjsonBc289ab0DecodeGithubComGtmkPolygonGclient7(in, &v13)
					out.Results = append(out.Results, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBc289ab0EncodeGithubComGtmkPolygonGclient6(out *jwriter.Writer, in StockTradesResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"results\":"
		out.RawString(prefix[1:])
		if in.Results == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.Results {
				if v14 > 0 {
					out.RawByte(',')
				}
				easyjsonBc289ab0EncodeGithubComGtmkPolygonGclient7(out, v15)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StockTradesResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBc289ab0EncodeGithubComGtmkPolygonGclient6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StockTradesResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBc289ab0EncodeGithubComGtmkPolygonGclient6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StockTradesResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBc289ab0DecodeGithubComGtmkPolygonGclient6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StockTradesResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBc289ab0DecodeGithubComGtmkPolygonGclient6(l, v)
}
func easyjsonBc289ab0DecodeGithubComGtmkPolygonGclient7(in *jlexer.Lexer, out *Trade) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "I":
			out.ID = int64(in.Int64())
		case "x":
			out.Exchange = int32(in.Int32())
		case "p":
			out.Price = float64(in.Float64())
		case "i":
			out.TradeID = string(in.String())
		case "e":
			out.CorrID = int32(in.Int32())
		case "r":
			out.ReportID = int32(in.Int32())
		case "y":
			out.ExTime = int64(in.Int64())
		case "t":
			out.SIPTime = int64(in.Int64())
		case "f":
			out.TRFTime = int64(in.Int64())
		case "c":
			if in.IsNull() {
				in.Skip()
				out.Conditions = nil
			} else {
				in.Delim('[')
				if out.Conditions == nil {
					if !in.IsDelim(']') {
						out.Conditions = make([]int32, 0, 16)
					} else {
						out.Conditions = []int32{}
					}
				} else {
					out.Conditions = (out.Conditions)[:0]
				}
				for !in.IsDelim(']') {
					var v16 int32
					v16 = int32(in.Int32())
					out.Conditions = append(out.Conditions, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "q":
			out.Sequence = int32(in.Int32())
		case "s":
			out.Size = int32(in.Int32())
		case "z":
			out.ListedEx = int32(in.Int32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBc289ab0EncodeGithubComGtmkPolygonGclient7(out *jwriter.Writer, in Trade) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"I\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"x\":"
		out.RawString(prefix)
		out.Int32(int32(in.Exchange))
	}
	{
		const prefix string = ",\"p\":"
		out.RawString(prefix)
		out.Float64(float64(in.Price))
	}
	{
		const prefix string = ",\"i\":"
		out.RawString(prefix)
		out.String(string(in.TradeID))
	}
	{
		const prefix string = ",\"e\":"
		out.RawString(prefix)
		out.Int32(int32(in.CorrID))
	}
	{
		const prefix string = ",\"r\":"
		out.RawString(prefix)
		out.Int32(int32(in.ReportID))
	}
	{
		const prefix string = ",\"y\":"
		out.RawString(prefix)
		out.Int64(int64(in.ExTime))
	}
	{
		const prefix string = ",\"t\":"
		out.RawString(prefix)
		out.Int64(int64(in.SIPTime))
	}
	{
		const prefix string = ",\"f\":"
		out.RawString(prefix)
		out.Int64(int64(in.TRFTime))
	}
	{
		const prefix string = ",\"c\":"
		out.RawString(prefix)
		if in.Conditions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v17, v18 := range in.Conditions {
				if v17 > 0 {
					out.RawByte(',')
				}
				out.Int32(int32(v18))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"q\":"
		out.RawString(prefix)
		out.Int32(int32(in.Sequence))
	}
	{
		const prefix string = ",\"s\":"
		out.RawString(prefix)
		out.Int32(int32(in.Size))
	}
	{
		const prefix string = ",\"z\":"
		out.RawString(prefix)
		out.Int32(int32(in.ListedEx))
	}
	out.RawByte('}')
}
func easyjsonBc289ab0DecodeGithubComGtmkPolygonGclient8(in *jlexer.Lexer, out *StockSnapshotsResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "tickers":
			if in.IsNull() {
				in.Skip()
				out.Results = nil
			} else {
				in.Delim('[')
				if out.Results == nil {
					if !in.IsDelim(']') {
						out.Results = make(Snapshots, 0, 0)
					} else {
						out.Results = Snapshots{}
					}
				} else {
					out.Results = (out.Results)[:0]
				}
				for !in.IsDelim(']') {
					var v19 Snapshot
					easyjsonBc289ab0DecodeGithubComGtmkPolygonGclient9(in, &v19)
					out.Results = append(out.Results, v19)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBc289ab0EncodeGithubComGtmkPolygonGclient8(out *jwriter.Writer, in StockSnapshotsResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"tickers\":"
		out.RawString(prefix[1:])
		if in.Results == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v20, v21 := range in.Results {
				if v20 > 0 {
					out.RawByte(',')
				}
				easyjsonBc289ab0EncodeGithubComGtmkPolygonGclient9(out, v21)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StockSnapshotsResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBc289ab0EncodeGithubComGtmkPolygonGclient8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StockSnapshotsResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBc289ab0EncodeGithubComGtmkPolygonGclient8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StockSnapshotsResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBc289ab0DecodeGithubComGtmkPolygonGclient8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StockSnapshotsResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBc289ab0DecodeGithubComGtmkPolygonGclient8(l, v)
}
func easyjsonBc289ab0DecodeGithubComGtmkPolygonGclient9(in *jlexer.Lexer, out *Snapshot) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ticker":
			out.Ticker = string(in.String())
		case "todaysChange":
			out.TodayChange = float32(in.Float32())
		case "todaysChangePerc":
			out.TodayChangePct = float32(in.Float32())
		case "day":
			easyjsonBc289ab0DecodeGithubComGtmkPolygonGclient10(in, &out.Day)
		case "prevDay":
			easyjsonBc289ab0DecodeGithubComGtmkPolygonGclient10(in, &out.PrevDay)
		case "lastQuote":
			easyjsonBc289ab0DecodeGithubComGtmkPolygonGclient11(in, &out.LastQuote)
		case "lastTrade":
			easyjsonBc289ab0DecodeGithubComGtmkPolygonGclient12(in, &out.LastTrade)
		case "min":
			easyjsonBc289ab0DecodeGithubComGtmkPolygonGclient10(in, &out.Min)
		case "updated":
			out.Updated = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBc289ab0EncodeGithubComGtmkPolygonGclient9(out *jwriter.Writer, in Snapshot) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ticker\":"
		out.RawString(prefix[1:])
		out.String(string(in.Ticker))
	}
	{
		const prefix string = ",\"todaysChange\":"
		out.RawString(prefix)
		out.Float32(float32(in.TodayChange))
	}
	{
		const prefix string = ",\"todaysChangePerc\":"
		out.RawString(prefix)
		out.Float32(float32(in.TodayChangePct))
	}
	{
		const prefix string = ",\"day\":"
		out.RawString(prefix)
		easyjsonBc289ab0EncodeGithubComGtmkPolygonGclient10(out, in.Day)
	}
	{
		const prefix string = ",\"prevDay\":"
		out.RawString(prefix)
		easyjsonBc289ab0EncodeGithubComGtmkPolygonGclient10(out, in.PrevDay)
	}
	{
		const prefix string = ",\"lastQuote\":"
		out.RawString(prefix)
		easyjsonBc289ab0EncodeGithubComGtmkPolygonGclient11(out, in.LastQuote)
	}
	{
		const prefix string = ",\"lastTrade\":"
		out.RawString(prefix)
		easyjsonBc289ab0EncodeGithubComGtmkPolygonGclient12(out, in.LastTrade)
	}
	{
		const prefix string = ",\"min\":"
		out.RawString(prefix)
		easyjsonBc289ab0EncodeGithubComGtmkPolygonGclient10(out, in.Min)
	}
	{
		const prefix string = ",\"updated\":"
		out.RawString(prefix)
		out.Int64(int64(in.Updated))
	}
	out.RawByte('}')
}
func easyjsonBc289ab0DecodeGithubComGtmkPolygonGclient12(in *jlexer.Lexer, out *LastTrade) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "cond1":
			out.Condition1 = int32(in.Int32())
		case "exchange":
			out.Exchange = int32(in.Int32())
		case "float64":
			out.Price = float64(in.Float64())
		case "size":
			out.Size = int32(in.Int32())
		case "timestamp":
			out.Timestamp = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBc289ab0EncodeGithubComGtmkPolygonGclient12(out *jwriter.Writer, in LastTrade) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"cond1\":"
		out.RawString(prefix[1:])
		out.Int32(int32(in.Condition1))
	}
	{
		const prefix string = ",\"exchange\":"
		out.RawString(prefix)
		out.Int32(int32(in.Exchange))
	}
	{
		const prefix string = ",\"float64\":"
		out.RawString(prefix)
		out.Float64(float64(in.Price))
	}
	{
		const prefix string = ",\"size\":"
		out.RawString(prefix)
		out.Int32(int32(in.Size))
	}
	{
		const prefix string = ",\"timestamp\":"
		out.RawString(prefix)
		out.Int64(int64(in.Timestamp))
	}
	out.RawByte('}')
}
func easyjsonBc289ab0DecodeGithubComGtmkPolygonGclient11(in *jlexer.Lexer, out *LastQuote) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "bidprice":
			out.BidPrice = float64(in.Float64())
		case "bidexchange":
			out.BidExchange = int32(in.Int32())
		case "bidsize":
			out.BidSize = int32(in.Int32())
		case "askprice":
			out.AskPrice = float64(in.Float64())
		case "askexchange":
			out.AskExchange = int32(in.Int32())
		case "asksize":
			out.AskSize = int32(in.Int32())
		case "timestamp":
			out.Timestamp = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBc289ab0EncodeGithubComGtmkPolygonGclient11(out *jwriter.Writer, in LastQuote) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"bidprice\":"
		out.RawString(prefix[1:])
		out.Float64(float64(in.BidPrice))
	}
	{
		const prefix string = ",\"bidexchange\":"
		out.RawString(prefix)
		out.Int32(int32(in.BidExchange))
	}
	{
		const prefix string = ",\"bidsize\":"
		out.RawString(prefix)
		out.Int32(int32(in.BidSize))
	}
	{
		const prefix string = ",\"askprice\":"
		out.RawString(prefix)
		out.Float64(float64(in.AskPrice))
	}
	{
		const prefix string = ",\"askexchange\":"
		out.RawString(prefix)
		out.Int32(int32(in.AskExchange))
	}
	{
		const prefix string = ",\"asksize\":"
		out.RawString(prefix)
		out.Int32(int32(in.AskSize))
	}
	{
		const prefix string = ",\"timestamp\":"
		out.RawString(prefix)
		out.Int64(int64(in.Timestamp))
	}
	out.RawByte('}')
}
func easyjsonBc289ab0DecodeGithubComGtmkPolygonGclient10(in *jlexer.Lexer, out *Bar) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "T":
			out.Ticker = string(in.String())
		case "t":
			out.Time = int64(in.Int64())
		case "v":
			out.Volume = float32(in.Float32())
		case "o":
			out.Open = float32(in.Float32())
		case "c":
			out.Close = float32(in.Float32())
		case "h":
			out.High = float32(in.Float32())
		case "l":
			out.Low = float32(in.Float32())
		case "n":
			out.Trades = int32(in.Int32())
		case "vw":
			out.VW = float32(in.Float32())
		case "av":
			out.AV = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBc289ab0EncodeGithubComGtmkPolygonGclient10(out *jwriter.Writer, in Bar) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"T\":"
		out.RawString(prefix[1:])
		out.String(string(in.Ticker))
	}
	{
		const prefix string = ",\"t\":"
		out.RawString(prefix)
		out.Int64(int64(in.Time))
	}
	{
		const prefix string = ",\"v\":"
		out.RawString(prefix)
		out.Float32(float32(in.Volume))
	}
	{
		const prefix string = ",\"o\":"
		out.RawString(prefix)
		out.Float32(float32(in.Open))
	}
	{
		const prefix string = ",\"c\":"
		out.RawString(prefix)
		out.Float32(float32(in.Close))
	}
	{
		const prefix string = ",\"h\":"
		out.RawString(prefix)
		out.Float32(float32(in.High))
	}
	{
		const prefix string = ",\"l\":"
		out.RawString(prefix)
		out.Float32(float32(in.Low))
	}
	{
		const prefix string = ",\"n\":"
		out.RawString(prefix)
		out.Int32(int32(in.Trades))
	}
	{
		const prefix string = ",\"vw\":"
		out.RawString(prefix)
		out.Float32(float32(in.VW))
	}
	{
		const prefix string = ",\"av\":"
		out.RawString(prefix)
		out.Int64(int64(in.AV))
	}
	out.RawByte('}')
}
func easyjsonBc289ab0DecodeGithubComGtmkPolygonGclient13(in *jlexer.Lexer, out *StockQuotesResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "results":
			if in.IsNull() {
				in.Skip()
				out.Results = nil
			} else {
				in.Delim('[')
				if out.Results == nil {
					if !in.IsDelim(']') {
						out.Results = make(Quotes, 0, 0)
					} else {
						out.Results = Quotes{}
					}
				} else {
					out.Results = (out.Results)[:0]
				}
				for !in.IsDelim(']') {
					var v22 Quote
					easyjsonBc289ab0DecodeGithubComGtmkPolygonGclient14(in, &v22)
					out.Results = append(out.Results, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBc289ab0EncodeGithubComGtmkPolygonGclient13(out *jwriter.Writer, in StockQuotesResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"results\":"
		out.RawString(prefix[1:])
		if in.Results == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v23, v24 := range in.Results {
				if v23 > 0 {
					out.RawByte(',')
				}
				easyjsonBc289ab0EncodeGithubComGtmkPolygonGclient14(out, v24)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StockQuotesResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBc289ab0EncodeGithubComGtmkPolygonGclient13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StockQuotesResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBc289ab0EncodeGithubComGtmkPolygonGclient13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StockQuotesResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBc289ab0DecodeGithubComGtmkPolygonGclient13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StockQuotesResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBc289ab0DecodeGithubComGtmkPolygonGclient13(l, v)
}
func easyjsonBc289ab0DecodeGithubComGtmkPolygonGclient14(in *jlexer.Lexer, out *Quote) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "y":
			out.ExTime = int64(in.Int64())
		case "t":
			out.SIPTime = int64(in.Int64())
		case "f":
			out.TRFTime = int64(in.Int64())
		case "q":
			out.Sequence = int32(in.Int32())
		case "c":
			if in.IsNull() {
				in.Skip()
				out.Conditions = nil
			} else {
				in.Delim('[')
				if out.Conditions == nil {
					if !in.IsDelim(']') {
						out.Conditions = make([]int32, 0, 16)
					} else {
						out.Conditions = []int32{}
					}
				} else {
					out.Conditions = (out.Conditions)[:0]
				}
				for !in.IsDelim(']') {
					var v25 int32
					v25 = int32(in.Int32())
					out.Conditions = append(out.Conditions, v25)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "i":
			if in.IsNull() {
				in.Skip()
				out.Indicators = nil
			} else {
				in.Delim('[')
				if out.Indicators == nil {
					if !in.IsDelim(']') {
						out.Indicators = make([]int32, 0, 16)
					} else {
						out.Indicators = []int32{}
					}
				} else {
					out.Indicators = (out.Indicators)[:0]
				}
				for !in.IsDelim(']') {
					var v26 int32
					v26 = int32(in.Int32())
					out.Indicators = append(out.Indicators, v26)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "p":
			out.BidPrice = float64(in.Float64())
		case "x":
			out.BidExchange = int32(in.Int32())
		case "s":
			out.BidSize = int32(in.Int32())
		case "P":
			out.AskPrice = float64(in.Float64())
		case "X":
			out.AskExchange = int32(in.Int32())
		case "S":
			out.AskSize = int32(in.Int32())
		case "z":
			out.ListedEx = int32(in.Int32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBc289ab0EncodeGithubComGtmkPolygonGclient14(out *jwriter.Writer, in Quote) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"y\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ExTime))
	}
	{
		const prefix string = ",\"t\":"
		out.RawString(prefix)
		out.Int64(int64(in.SIPTime))
	}
	{
		const prefix string = ",\"f\":"
		out.RawString(prefix)
		out.Int64(int64(in.TRFTime))
	}
	{
		const prefix string = ",\"q\":"
		out.RawString(prefix)
		out.Int32(int32(in.Sequence))
	}
	{
		const prefix string = ",\"c\":"
		out.RawString(prefix)
		if in.Conditions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v27, v28 := range in.Conditions {
				if v27 > 0 {
					out.RawByte(',')
				}
				out.Int32(int32(v28))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"i\":"
		out.RawString(prefix)
		if in.Indicators == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v29, v30 := range in.Indicators {
				if v29 > 0 {
					out.RawByte(',')
				}
				out.Int32(int32(v30))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"p\":"
		out.RawString(prefix)
		out.Float64(float64(in.BidPrice))
	}
	{
		const prefix string = ",\"x\":"
		out.RawString(prefix)
		out.Int32(int32(in.BidExchange))
	}
	{
		const prefix string = ",\"s\":"
		out.RawString(prefix)
		out.Int32(int32(in.BidSize))
	}
	{
		const prefix string = ",\"P\":"
		out.RawString(prefix)
		out.Float64(float64(in.AskPrice))
	}
	{
		const prefix string = ",\"X\":"
		out.RawString(prefix)
		out.Int32(int32(in.AskExchange))
	}
	{
		const prefix string = ",\"S\":"
		out.RawString(prefix)
		out.Int32(int32(in.AskSize))
	}
	{
		const prefix string = ",\"z\":"
		out.RawString(prefix)
		out.Int32(int32(in.ListedEx))
	}
	out.RawByte('}')
}
func easyjsonBc289ab0DecodeGithubComGtmkPolygonGclient15(in *jlexer.Lexer, out *StockBarsResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "results":
			(out.Results).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBc289ab0EncodeGithubComGtmkPolygonGclient15(out *jwriter.Writer, in StockBarsResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"results\":"
		out.RawString(prefix[1:])
		(in.Results).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StockBarsResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBc289ab0EncodeGithubComGtmkPolygonGclient15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StockBarsResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBc289ab0EncodeGithubComGtmkPolygonGclient15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StockBarsResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBc289ab0DecodeGithubComGtmkPolygonGclient15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StockBarsResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBc289ab0DecodeGithubComGtmkPolygonGclient15(l, v)
}
func easyjsonBc289ab0DecodeGithubComGtmkPolygonGclient16(in *jlexer.Lexer, out *PolgyonServerMsges) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(PolgyonServerMsges, 0, 4)
			} else {
				*out = PolgyonServerMsges{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v31 PolgyonServerMsg
			easyjsonBc289ab0DecodeGithubComGtmkPolygonGclient17(in, &v31)
			*out = append(*out, v31)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBc289ab0EncodeGithubComGtmkPolygonGclient16(out *jwriter.Writer, in PolgyonServerMsges) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v32, v33 := range in {
			if v32 > 0 {
				out.RawByte(',')
			}
			easyjsonBc289ab0EncodeGithubComGtmkPolygonGclient17(out, v33)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v PolgyonServerMsges) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBc289ab0EncodeGithubComGtmkPolygonGclient16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PolgyonServerMsges) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBc289ab0EncodeGithubComGtmkPolygonGclient16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PolgyonServerMsges) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBc289ab0DecodeGithubComGtmkPolygonGclient16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PolgyonServerMsges) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBc289ab0DecodeGithubComGtmkPolygonGclient16(l, v)
}
func easyjsonBc289ab0DecodeGithubComGtmkPolygonGclient17(in *jlexer.Lexer, out *PolgyonServerMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ev":
			out.Event = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBc289ab0EncodeGithubComGtmkPolygonGclient17(out *jwriter.Writer, in PolgyonServerMsg) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ev\":"
		out.RawString(prefix[1:])
		out.String(string(in.Event))
	}
	out.RawByte('}')
}
func easyjsonBc289ab0DecodeGithubComGtmkPolygonGclient18(in *jlexer.Lexer, out *Bars) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(Bars, 0, 1)
			} else {
				*out = Bars{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v34 Bar
			easyjsonBc289ab0DecodeGithubComGtmkPolygonGclient10(in, &v34)
			*out = append(*out, v34)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBc289ab0EncodeGithubComGtmkPolygonGclient18(out *jwriter.Writer, in Bars) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v35, v36 := range in {
			if v35 > 0 {
				out.RawByte(',')
			}
			easyjsonBc289ab0EncodeGithubComGtmkPolygonGclient10(out, v36)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v Bars) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBc289ab0EncodeGithubComGtmkPolygonGclient18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Bars) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBc289ab0EncodeGithubComGtmkPolygonGclient18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Bars) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBc289ab0DecodeGithubComGtmkPolygonGclient18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Bars) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBc289ab0DecodeGithubComGtmkPolygonGclient18(l, v)
}
